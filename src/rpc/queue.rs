// This file is generated by rust-protobuf 2.2.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct EnqueueRequest {
    // message fields
    pub message: ::std::vec::Vec<u8>,
    pub priority: Priority,
    pub requiredCapabilities: ::protobuf::RepeatedField<::std::string::String>,
    pub refId: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl EnqueueRequest {
    pub fn new() -> EnqueueRequest {
        ::std::default::Default::default()
    }

    // bytes message = 1;

    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::vec::Vec<u8>) {
        self.message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.message, ::std::vec::Vec::new())
    }

    pub fn get_message(&self) -> &[u8] {
        &self.message
    }

    // .Priority priority = 2;

    pub fn clear_priority(&mut self) {
        self.priority = Priority::LOW;
    }

    // Param is passed by value, moved
    pub fn set_priority(&mut self, v: Priority) {
        self.priority = v;
    }

    pub fn get_priority(&self) -> Priority {
        self.priority
    }

    // repeated string requiredCapabilities = 3;

    pub fn clear_requiredCapabilities(&mut self) {
        self.requiredCapabilities.clear();
    }

    // Param is passed by value, moved
    pub fn set_requiredCapabilities(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.requiredCapabilities = v;
    }

    // Mutable pointer to the field.
    pub fn mut_requiredCapabilities(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.requiredCapabilities
    }

    // Take field
    pub fn take_requiredCapabilities(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.requiredCapabilities, ::protobuf::RepeatedField::new())
    }

    pub fn get_requiredCapabilities(&self) -> &[::std::string::String] {
        &self.requiredCapabilities
    }

    // int32 refId = 4;

    pub fn clear_refId(&mut self) {
        self.refId = 0;
    }

    // Param is passed by value, moved
    pub fn set_refId(&mut self, v: i32) {
        self.refId = v;
    }

    pub fn get_refId(&self) -> i32 {
        self.refId
    }
}

impl ::protobuf::Message for EnqueueRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.message)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.priority, 2, &mut self.unknown_fields)?
                },
                3 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.requiredCapabilities)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.refId = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.message);
        }
        if self.priority != Priority::LOW {
            my_size += ::protobuf::rt::enum_size(2, self.priority);
        }
        for value in &self.requiredCapabilities {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        if self.refId != 0 {
            my_size += ::protobuf::rt::value_size(4, self.refId, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.message.is_empty() {
            os.write_bytes(1, &self.message)?;
        }
        if self.priority != Priority::LOW {
            os.write_enum(2, self.priority.value())?;
        }
        for v in &self.requiredCapabilities {
            os.write_string(3, &v)?;
        };
        if self.refId != 0 {
            os.write_int32(4, self.refId)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EnqueueRequest {
        EnqueueRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "message",
                    |m: &EnqueueRequest| { &m.message },
                    |m: &mut EnqueueRequest| { &mut m.message },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Priority>>(
                    "priority",
                    |m: &EnqueueRequest| { &m.priority },
                    |m: &mut EnqueueRequest| { &mut m.priority },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "requiredCapabilities",
                    |m: &EnqueueRequest| { &m.requiredCapabilities },
                    |m: &mut EnqueueRequest| { &mut m.requiredCapabilities },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "refId",
                    |m: &EnqueueRequest| { &m.refId },
                    |m: &mut EnqueueRequest| { &mut m.refId },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<EnqueueRequest>(
                    "EnqueueRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static EnqueueRequest {
        static mut instance: ::protobuf::lazy::Lazy<EnqueueRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const EnqueueRequest,
        };
        unsafe {
            instance.get(EnqueueRequest::new)
        }
    }
}

impl ::protobuf::Clear for EnqueueRequest {
    fn clear(&mut self) {
        self.clear_message();
        self.clear_priority();
        self.clear_requiredCapabilities();
        self.clear_refId();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EnqueueRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EnqueueRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EnqueueResponse {
    // message fields
    pub id: ::std::string::String,
    pub refId: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl EnqueueResponse {
    pub fn new() -> EnqueueResponse {
        ::std::default::Default::default()
    }

    // string id = 1;

    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    pub fn get_id(&self) -> &str {
        &self.id
    }

    // int32 refId = 2;

    pub fn clear_refId(&mut self) {
        self.refId = 0;
    }

    // Param is passed by value, moved
    pub fn set_refId(&mut self, v: i32) {
        self.refId = v;
    }

    pub fn get_refId(&self) -> i32 {
        self.refId
    }
}

impl ::protobuf::Message for EnqueueResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.refId = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if self.refId != 0 {
            my_size += ::protobuf::rt::value_size(2, self.refId, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if self.refId != 0 {
            os.write_int32(2, self.refId)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EnqueueResponse {
        EnqueueResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "id",
                    |m: &EnqueueResponse| { &m.id },
                    |m: &mut EnqueueResponse| { &mut m.id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "refId",
                    |m: &EnqueueResponse| { &m.refId },
                    |m: &mut EnqueueResponse| { &mut m.refId },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<EnqueueResponse>(
                    "EnqueueResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static EnqueueResponse {
        static mut instance: ::protobuf::lazy::Lazy<EnqueueResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const EnqueueResponse,
        };
        unsafe {
            instance.get(EnqueueResponse::new)
        }
    }
}

impl ::protobuf::Clear for EnqueueResponse {
    fn clear(&mut self) {
        self.clear_id();
        self.clear_refId();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EnqueueResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EnqueueResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PopRequest {
    // message fields
    pub availableCapabilities: ::protobuf::RepeatedField<::std::string::String>,
    pub waitForMessage: bool,
    pub refId: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl PopRequest {
    pub fn new() -> PopRequest {
        ::std::default::Default::default()
    }

    // repeated string availableCapabilities = 1;

    pub fn clear_availableCapabilities(&mut self) {
        self.availableCapabilities.clear();
    }

    // Param is passed by value, moved
    pub fn set_availableCapabilities(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.availableCapabilities = v;
    }

    // Mutable pointer to the field.
    pub fn mut_availableCapabilities(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.availableCapabilities
    }

    // Take field
    pub fn take_availableCapabilities(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.availableCapabilities, ::protobuf::RepeatedField::new())
    }

    pub fn get_availableCapabilities(&self) -> &[::std::string::String] {
        &self.availableCapabilities
    }

    // bool waitForMessage = 2;

    pub fn clear_waitForMessage(&mut self) {
        self.waitForMessage = false;
    }

    // Param is passed by value, moved
    pub fn set_waitForMessage(&mut self, v: bool) {
        self.waitForMessage = v;
    }

    pub fn get_waitForMessage(&self) -> bool {
        self.waitForMessage
    }

    // int32 refId = 3;

    pub fn clear_refId(&mut self) {
        self.refId = 0;
    }

    // Param is passed by value, moved
    pub fn set_refId(&mut self, v: i32) {
        self.refId = v;
    }

    pub fn get_refId(&self) -> i32 {
        self.refId
    }
}

impl ::protobuf::Message for PopRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.availableCapabilities)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.waitForMessage = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.refId = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.availableCapabilities {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        if self.waitForMessage != false {
            my_size += 2;
        }
        if self.refId != 0 {
            my_size += ::protobuf::rt::value_size(3, self.refId, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.availableCapabilities {
            os.write_string(1, &v)?;
        };
        if self.waitForMessage != false {
            os.write_bool(2, self.waitForMessage)?;
        }
        if self.refId != 0 {
            os.write_int32(3, self.refId)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PopRequest {
        PopRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "availableCapabilities",
                    |m: &PopRequest| { &m.availableCapabilities },
                    |m: &mut PopRequest| { &mut m.availableCapabilities },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "waitForMessage",
                    |m: &PopRequest| { &m.waitForMessage },
                    |m: &mut PopRequest| { &mut m.waitForMessage },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "refId",
                    |m: &PopRequest| { &m.refId },
                    |m: &mut PopRequest| { &mut m.refId },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PopRequest>(
                    "PopRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PopRequest {
        static mut instance: ::protobuf::lazy::Lazy<PopRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PopRequest,
        };
        unsafe {
            instance.get(PopRequest::new)
        }
    }
}

impl ::protobuf::Clear for PopRequest {
    fn clear(&mut self) {
        self.clear_availableCapabilities();
        self.clear_waitForMessage();
        self.clear_refId();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PopRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PopRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PopResponse {
    // message fields
    pub hadResult: bool,
    pub message: ::std::vec::Vec<u8>,
    pub id: ::std::string::String,
    pub refId: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl PopResponse {
    pub fn new() -> PopResponse {
        ::std::default::Default::default()
    }

    // bool hadResult = 3;

    pub fn clear_hadResult(&mut self) {
        self.hadResult = false;
    }

    // Param is passed by value, moved
    pub fn set_hadResult(&mut self, v: bool) {
        self.hadResult = v;
    }

    pub fn get_hadResult(&self) -> bool {
        self.hadResult
    }

    // bytes message = 1;

    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::vec::Vec<u8>) {
        self.message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.message, ::std::vec::Vec::new())
    }

    pub fn get_message(&self) -> &[u8] {
        &self.message
    }

    // string id = 2;

    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    pub fn get_id(&self) -> &str {
        &self.id
    }

    // int32 refId = 4;

    pub fn clear_refId(&mut self) {
        self.refId = 0;
    }

    // Param is passed by value, moved
    pub fn set_refId(&mut self, v: i32) {
        self.refId = v;
    }

    pub fn get_refId(&self) -> i32 {
        self.refId
    }
}

impl ::protobuf::Message for PopResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.hadResult = tmp;
                },
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.message)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.refId = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.hadResult != false {
            my_size += 2;
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.message);
        }
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.id);
        }
        if self.refId != 0 {
            my_size += ::protobuf::rt::value_size(4, self.refId, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.hadResult != false {
            os.write_bool(3, self.hadResult)?;
        }
        if !self.message.is_empty() {
            os.write_bytes(1, &self.message)?;
        }
        if !self.id.is_empty() {
            os.write_string(2, &self.id)?;
        }
        if self.refId != 0 {
            os.write_int32(4, self.refId)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PopResponse {
        PopResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "hadResult",
                    |m: &PopResponse| { &m.hadResult },
                    |m: &mut PopResponse| { &mut m.hadResult },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "message",
                    |m: &PopResponse| { &m.message },
                    |m: &mut PopResponse| { &mut m.message },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "id",
                    |m: &PopResponse| { &m.id },
                    |m: &mut PopResponse| { &mut m.id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "refId",
                    |m: &PopResponse| { &m.refId },
                    |m: &mut PopResponse| { &mut m.refId },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PopResponse>(
                    "PopResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PopResponse {
        static mut instance: ::protobuf::lazy::Lazy<PopResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PopResponse,
        };
        unsafe {
            instance.get(PopResponse::new)
        }
    }
}

impl ::protobuf::Clear for PopResponse {
    fn clear(&mut self) {
        self.clear_hadResult();
        self.clear_message();
        self.clear_id();
        self.clear_refId();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PopResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PopResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AcknowledgeRequest {
    // message fields
    pub id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl AcknowledgeRequest {
    pub fn new() -> AcknowledgeRequest {
        ::std::default::Default::default()
    }

    // string id = 1;

    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    pub fn get_id(&self) -> &str {
        &self.id
    }
}

impl ::protobuf::Message for AcknowledgeRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AcknowledgeRequest {
        AcknowledgeRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "id",
                    |m: &AcknowledgeRequest| { &m.id },
                    |m: &mut AcknowledgeRequest| { &mut m.id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AcknowledgeRequest>(
                    "AcknowledgeRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AcknowledgeRequest {
        static mut instance: ::protobuf::lazy::Lazy<AcknowledgeRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AcknowledgeRequest,
        };
        unsafe {
            instance.get(AcknowledgeRequest::new)
        }
    }
}

impl ::protobuf::Clear for AcknowledgeRequest {
    fn clear(&mut self) {
        self.clear_id();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AcknowledgeRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AcknowledgeRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ErrorResponse {
    // message fields
    pub message: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl ErrorResponse {
    pub fn new() -> ErrorResponse {
        ::std::default::Default::default()
    }

    // string message = 1;

    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message, ::std::string::String::new())
    }

    pub fn get_message(&self) -> &str {
        &self.message
    }
}

impl ::protobuf::Message for ErrorResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.message)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.message.is_empty() {
            os.write_string(1, &self.message)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ErrorResponse {
        ErrorResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "message",
                    |m: &ErrorResponse| { &m.message },
                    |m: &mut ErrorResponse| { &mut m.message },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ErrorResponse>(
                    "ErrorResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ErrorResponse {
        static mut instance: ::protobuf::lazy::Lazy<ErrorResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ErrorResponse,
        };
        unsafe {
            instance.get(ErrorResponse::new)
        }
    }
}

impl ::protobuf::Clear for ErrorResponse {
    fn clear(&mut self) {
        self.clear_message();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ErrorResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ErrorResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RequestWrapper {
    // message oneof groups
    pub message: ::std::option::Option<RequestWrapper_oneof_message>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

#[derive(Clone, PartialEq)]
pub enum RequestWrapper_oneof_message {
    enqueue(EnqueueRequest),
    pop(PopRequest),
    acknowledge(AcknowledgeRequest),
}

impl RequestWrapper {
    pub fn new() -> RequestWrapper {
        ::std::default::Default::default()
    }

    // .EnqueueRequest enqueue = 1;

    pub fn clear_enqueue(&mut self) {
        self.message = ::std::option::Option::None;
    }

    pub fn has_enqueue(&self) -> bool {
        match self.message {
            ::std::option::Option::Some(RequestWrapper_oneof_message::enqueue(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_enqueue(&mut self, v: EnqueueRequest) {
        self.message = ::std::option::Option::Some(RequestWrapper_oneof_message::enqueue(v))
    }

    // Mutable pointer to the field.
    pub fn mut_enqueue(&mut self) -> &mut EnqueueRequest {
        if let ::std::option::Option::Some(RequestWrapper_oneof_message::enqueue(_)) = self.message {} else {
            self.message = ::std::option::Option::Some(RequestWrapper_oneof_message::enqueue(EnqueueRequest::new()));
        }
        match self.message {
            ::std::option::Option::Some(RequestWrapper_oneof_message::enqueue(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_enqueue(&mut self) -> EnqueueRequest {
        if self.has_enqueue() {
            match self.message.take() {
                ::std::option::Option::Some(RequestWrapper_oneof_message::enqueue(v)) => v,
                _ => panic!(),
            }
        } else {
            EnqueueRequest::new()
        }
    }

    pub fn get_enqueue(&self) -> &EnqueueRequest {
        match self.message {
            ::std::option::Option::Some(RequestWrapper_oneof_message::enqueue(ref v)) => v,
            _ => EnqueueRequest::default_instance(),
        }
    }

    // .PopRequest pop = 2;

    pub fn clear_pop(&mut self) {
        self.message = ::std::option::Option::None;
    }

    pub fn has_pop(&self) -> bool {
        match self.message {
            ::std::option::Option::Some(RequestWrapper_oneof_message::pop(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_pop(&mut self, v: PopRequest) {
        self.message = ::std::option::Option::Some(RequestWrapper_oneof_message::pop(v))
    }

    // Mutable pointer to the field.
    pub fn mut_pop(&mut self) -> &mut PopRequest {
        if let ::std::option::Option::Some(RequestWrapper_oneof_message::pop(_)) = self.message {} else {
            self.message = ::std::option::Option::Some(RequestWrapper_oneof_message::pop(PopRequest::new()));
        }
        match self.message {
            ::std::option::Option::Some(RequestWrapper_oneof_message::pop(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_pop(&mut self) -> PopRequest {
        if self.has_pop() {
            match self.message.take() {
                ::std::option::Option::Some(RequestWrapper_oneof_message::pop(v)) => v,
                _ => panic!(),
            }
        } else {
            PopRequest::new()
        }
    }

    pub fn get_pop(&self) -> &PopRequest {
        match self.message {
            ::std::option::Option::Some(RequestWrapper_oneof_message::pop(ref v)) => v,
            _ => PopRequest::default_instance(),
        }
    }

    // .AcknowledgeRequest acknowledge = 3;

    pub fn clear_acknowledge(&mut self) {
        self.message = ::std::option::Option::None;
    }

    pub fn has_acknowledge(&self) -> bool {
        match self.message {
            ::std::option::Option::Some(RequestWrapper_oneof_message::acknowledge(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_acknowledge(&mut self, v: AcknowledgeRequest) {
        self.message = ::std::option::Option::Some(RequestWrapper_oneof_message::acknowledge(v))
    }

    // Mutable pointer to the field.
    pub fn mut_acknowledge(&mut self) -> &mut AcknowledgeRequest {
        if let ::std::option::Option::Some(RequestWrapper_oneof_message::acknowledge(_)) = self.message {} else {
            self.message = ::std::option::Option::Some(RequestWrapper_oneof_message::acknowledge(AcknowledgeRequest::new()));
        }
        match self.message {
            ::std::option::Option::Some(RequestWrapper_oneof_message::acknowledge(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_acknowledge(&mut self) -> AcknowledgeRequest {
        if self.has_acknowledge() {
            match self.message.take() {
                ::std::option::Option::Some(RequestWrapper_oneof_message::acknowledge(v)) => v,
                _ => panic!(),
            }
        } else {
            AcknowledgeRequest::new()
        }
    }

    pub fn get_acknowledge(&self) -> &AcknowledgeRequest {
        match self.message {
            ::std::option::Option::Some(RequestWrapper_oneof_message::acknowledge(ref v)) => v,
            _ => AcknowledgeRequest::default_instance(),
        }
    }
}

impl ::protobuf::Message for RequestWrapper {
    fn is_initialized(&self) -> bool {
        if let Some(RequestWrapper_oneof_message::enqueue(ref v)) = self.message {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(RequestWrapper_oneof_message::pop(ref v)) = self.message {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(RequestWrapper_oneof_message::acknowledge(ref v)) = self.message {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.message = ::std::option::Option::Some(RequestWrapper_oneof_message::enqueue(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.message = ::std::option::Option::Some(RequestWrapper_oneof_message::pop(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.message = ::std::option::Option::Some(RequestWrapper_oneof_message::acknowledge(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.message {
            match v {
                &RequestWrapper_oneof_message::enqueue(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &RequestWrapper_oneof_message::pop(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &RequestWrapper_oneof_message::acknowledge(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.message {
            match v {
                &RequestWrapper_oneof_message::enqueue(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &RequestWrapper_oneof_message::pop(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &RequestWrapper_oneof_message::acknowledge(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RequestWrapper {
        RequestWrapper::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, EnqueueRequest>(
                    "enqueue",
                    RequestWrapper::has_enqueue,
                    RequestWrapper::get_enqueue,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, PopRequest>(
                    "pop",
                    RequestWrapper::has_pop,
                    RequestWrapper::get_pop,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, AcknowledgeRequest>(
                    "acknowledge",
                    RequestWrapper::has_acknowledge,
                    RequestWrapper::get_acknowledge,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RequestWrapper>(
                    "RequestWrapper",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RequestWrapper {
        static mut instance: ::protobuf::lazy::Lazy<RequestWrapper> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RequestWrapper,
        };
        unsafe {
            instance.get(RequestWrapper::new)
        }
    }
}

impl ::protobuf::Clear for RequestWrapper {
    fn clear(&mut self) {
        self.clear_enqueue();
        self.clear_pop();
        self.clear_acknowledge();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RequestWrapper {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RequestWrapper {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ResponseWrapper {
    // message oneof groups
    pub message: ::std::option::Option<ResponseWrapper_oneof_message>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

#[derive(Clone, PartialEq)]
pub enum ResponseWrapper_oneof_message {
    enqueue(EnqueueResponse),
    pop(PopResponse),
}

impl ResponseWrapper {
    pub fn new() -> ResponseWrapper {
        ::std::default::Default::default()
    }

    // .EnqueueResponse enqueue = 1;

    pub fn clear_enqueue(&mut self) {
        self.message = ::std::option::Option::None;
    }

    pub fn has_enqueue(&self) -> bool {
        match self.message {
            ::std::option::Option::Some(ResponseWrapper_oneof_message::enqueue(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_enqueue(&mut self, v: EnqueueResponse) {
        self.message = ::std::option::Option::Some(ResponseWrapper_oneof_message::enqueue(v))
    }

    // Mutable pointer to the field.
    pub fn mut_enqueue(&mut self) -> &mut EnqueueResponse {
        if let ::std::option::Option::Some(ResponseWrapper_oneof_message::enqueue(_)) = self.message {} else {
            self.message = ::std::option::Option::Some(ResponseWrapper_oneof_message::enqueue(EnqueueResponse::new()));
        }
        match self.message {
            ::std::option::Option::Some(ResponseWrapper_oneof_message::enqueue(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_enqueue(&mut self) -> EnqueueResponse {
        if self.has_enqueue() {
            match self.message.take() {
                ::std::option::Option::Some(ResponseWrapper_oneof_message::enqueue(v)) => v,
                _ => panic!(),
            }
        } else {
            EnqueueResponse::new()
        }
    }

    pub fn get_enqueue(&self) -> &EnqueueResponse {
        match self.message {
            ::std::option::Option::Some(ResponseWrapper_oneof_message::enqueue(ref v)) => v,
            _ => EnqueueResponse::default_instance(),
        }
    }

    // .PopResponse pop = 2;

    pub fn clear_pop(&mut self) {
        self.message = ::std::option::Option::None;
    }

    pub fn has_pop(&self) -> bool {
        match self.message {
            ::std::option::Option::Some(ResponseWrapper_oneof_message::pop(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_pop(&mut self, v: PopResponse) {
        self.message = ::std::option::Option::Some(ResponseWrapper_oneof_message::pop(v))
    }

    // Mutable pointer to the field.
    pub fn mut_pop(&mut self) -> &mut PopResponse {
        if let ::std::option::Option::Some(ResponseWrapper_oneof_message::pop(_)) = self.message {} else {
            self.message = ::std::option::Option::Some(ResponseWrapper_oneof_message::pop(PopResponse::new()));
        }
        match self.message {
            ::std::option::Option::Some(ResponseWrapper_oneof_message::pop(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_pop(&mut self) -> PopResponse {
        if self.has_pop() {
            match self.message.take() {
                ::std::option::Option::Some(ResponseWrapper_oneof_message::pop(v)) => v,
                _ => panic!(),
            }
        } else {
            PopResponse::new()
        }
    }

    pub fn get_pop(&self) -> &PopResponse {
        match self.message {
            ::std::option::Option::Some(ResponseWrapper_oneof_message::pop(ref v)) => v,
            _ => PopResponse::default_instance(),
        }
    }
}

impl ::protobuf::Message for ResponseWrapper {
    fn is_initialized(&self) -> bool {
        if let Some(ResponseWrapper_oneof_message::enqueue(ref v)) = self.message {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ResponseWrapper_oneof_message::pop(ref v)) = self.message {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.message = ::std::option::Option::Some(ResponseWrapper_oneof_message::enqueue(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.message = ::std::option::Option::Some(ResponseWrapper_oneof_message::pop(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.message {
            match v {
                &ResponseWrapper_oneof_message::enqueue(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ResponseWrapper_oneof_message::pop(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.message {
            match v {
                &ResponseWrapper_oneof_message::enqueue(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ResponseWrapper_oneof_message::pop(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ResponseWrapper {
        ResponseWrapper::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, EnqueueResponse>(
                    "enqueue",
                    ResponseWrapper::has_enqueue,
                    ResponseWrapper::get_enqueue,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, PopResponse>(
                    "pop",
                    ResponseWrapper::has_pop,
                    ResponseWrapper::get_pop,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ResponseWrapper>(
                    "ResponseWrapper",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ResponseWrapper {
        static mut instance: ::protobuf::lazy::Lazy<ResponseWrapper> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ResponseWrapper,
        };
        unsafe {
            instance.get(ResponseWrapper::new)
        }
    }
}

impl ::protobuf::Clear for ResponseWrapper {
    fn clear(&mut self) {
        self.clear_enqueue();
        self.clear_pop();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ResponseWrapper {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ResponseWrapper {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Priority {
    LOW = 0,
    HIGH = 1,
}

impl ::protobuf::ProtobufEnum for Priority {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Priority> {
        match value {
            0 => ::std::option::Option::Some(Priority::LOW),
            1 => ::std::option::Option::Some(Priority::HIGH),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Priority] = &[
            Priority::LOW,
            Priority::HIGH,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("Priority", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for Priority {
}

impl ::std::default::Default for Priority {
    fn default() -> Self {
        Priority::LOW
    }
}

impl ::protobuf::reflect::ProtobufValue for Priority {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x15src/proto/queue.proto\"\x9b\x01\n\x0eEnqueueRequest\x12\x18\n\x07m\
    essage\x18\x01\x20\x01(\x0cR\x07message\x12%\n\x08priority\x18\x02\x20\
    \x01(\x0e2\t.PriorityR\x08priority\x122\n\x14requiredCapabilities\x18\
    \x03\x20\x03(\tR\x14requiredCapabilities\x12\x14\n\x05refId\x18\x04\x20\
    \x01(\x05R\x05refId\"7\n\x0fEnqueueResponse\x12\x0e\n\x02id\x18\x01\x20\
    \x01(\tR\x02id\x12\x14\n\x05refId\x18\x02\x20\x01(\x05R\x05refId\"\x80\
    \x01\n\nPopRequest\x124\n\x15availableCapabilities\x18\x01\x20\x03(\tR\
    \x15availableCapabilities\x12&\n\x0ewaitForMessage\x18\x02\x20\x01(\x08R\
    \x0ewaitForMessage\x12\x14\n\x05refId\x18\x03\x20\x01(\x05R\x05refId\"k\
    \n\x0bPopResponse\x12\x1c\n\thadResult\x18\x03\x20\x01(\x08R\thadResult\
    \x12\x18\n\x07message\x18\x01\x20\x01(\x0cR\x07message\x12\x0e\n\x02id\
    \x18\x02\x20\x01(\tR\x02id\x12\x14\n\x05refId\x18\x04\x20\x01(\x05R\x05r\
    efId\"$\n\x12AcknowledgeRequest\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02i\
    d\")\n\rErrorResponse\x12\x18\n\x07message\x18\x01\x20\x01(\tR\x07messag\
    e\"\xa2\x01\n\x0eRequestWrapper\x12+\n\x07enqueue\x18\x01\x20\x01(\x0b2\
    \x0f.EnqueueRequestH\0R\x07enqueue\x12\x1f\n\x03pop\x18\x02\x20\x01(\x0b\
    2\x0b.PopRequestH\0R\x03pop\x127\n\x0backnowledge\x18\x03\x20\x01(\x0b2\
    \x13.AcknowledgeRequestH\0R\x0backnowledgeB\t\n\x07message\"l\n\x0fRespo\
    nseWrapper\x12,\n\x07enqueue\x18\x01\x20\x01(\x0b2\x10.EnqueueResponseH\
    \0R\x07enqueue\x12\x20\n\x03pop\x18\x02\x20\x01(\x0b2\x0c.PopResponseH\0\
    R\x03popB\t\n\x07message*\x1d\n\x08Priority\x12\x07\n\x03LOW\x10\0\x12\
    \x08\n\x04HIGH\x10\x01b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
